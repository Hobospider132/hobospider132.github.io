import { Beatmap } from "./beatmap.js";
/**
 * It's a bitwise enum, works in such a way that `1` would be `NOFAIL` while `10` would be `HIDDEN + EASY`
 * https://github.com/ppy/osu-api/wiki#mods
 */
export declare enum Mods {
    NONE = 0,
    NOFAIL = 1,
    EASY = 2,
    TOUCHDEVICE = 4,
    HIDDEN = 8,
    HARDROCK = 16,
    SUDDENDEATH = 32,
    DOUBLETIME = 64,
    RELAX = 128,
    HALFTIME = 256,
    /**
     * @remarks From osu!api wiki: Only set along with DoubleTime. i.e: NC only gives 576
     */
    NIGHTCORE = 512,
    FLASHLIGHT = 1024,
    AUTOPLAY = 2048,
    SPUNOUT = 4096,
    /**
     * It's called `Relax2` in the osu!api wiki
     */
    AUTOPILOT = 8192,
    /**
     * @remarks From osu!api wiki: Only set along with SuddenDeath. i.e: PF only gives 16416
     */
    PERFECT = 16384,
    KEY4 = 32768,
    KEY5 = 65536,
    KEY6 = 131072,
    KEY7 = 262144,
    KEY8 = 524288,
    FADEIN = 1048576,
    RANDOM = 2097152,
    CINEMA = 4194304,
    TARGET = 8388608,
    KEY9 = 16777216,
    KEYCOOP = 33554432,
    KEY1 = 67108864,
    KEY3 = 134217728,
    KEY2 = 268435456,
    SCOREV2 = 536870912,
    MIRROR = 1073741824
}
export declare namespace Mods {
    /**
     * API returns the SR (and pp stuff) of a Beatmap as 0/null if any of those mods are included
     * @remarks `Mods.removeUnsupported` takes care of automatically removing/replacing them
     */
    const unsupported: Mods[];
    /**
     * This function is called automatically for `getBeatmap` and `getBeatmaps`, you may use it yourself if it is necessary for anything else
     * @param mods An array of `Mods` from which the so-called "unsupported mods" will be removed
     * @returns `mods` without the unsupported mods, and with `Mods.DOUBLETIME` if `Mods.NIGHTCORE` was in there
     */
    function removeUnsupported(mods: Mods[]): Mods[];
    /**
     * This function turns a number that represents `Mods` into an array of `Mods[]`, which makes it useful to translate responses from the API server
     * @param mods The number representing the `Mods`, usually from the response received after a request to the API server
     * @returns An array with all the appropriate `Mods`
     */
    function bitsToArray(mods: Mods): Mods[];
    /**
     * This function turns an array of `Mods` into a number that the API server can understand
     * @remarks One useful thing about it is the distinction made between `[]` (lack of mods) and `[Mods.NOMOD]`; specifying the nomod mod can alter requests
     * @param mods An array of `Mods` that will be turned into bits
     * @returns A number representing the `Mods`, or `null` if the array is empty
     */
    function arrayToBits(mods: Mods[]): Mods | null;
    /**
     * This function returns a Beatmap with properties adjusted to the chosen Mods without making a request to the servers
     *
     * The properties are namely:
     * `total_length`, `hit_length`, `bpm`, `diff_size`, `diff_approach`, `diff_overall`, `diff_drain`
     * @remarks Note that this function doesn't adjust `diff_aim`, `diff_speed` or `difficultyrating`!
     * Making a request using `getBeatmap()` adjusts everything, if you need to adjust any of these three properties
     * @param beatmap The Beatmap to adapt
     * @param mods The Mods to which the Beatmap will be adapted
     * @returns The Beatmap, but adjusted to the Mods
     */
    const adjustBeatmapStats: (beatmap: Beatmap, mods: Mods | Mods[]) => Beatmap;
}
